A POMDP Model for Safe Geological Carbon
Sequestration
Anthony Corso
Department of Aeronautics and Astronautics
Stanford University
Stanford, CA
acorso@stanford.eduYizheng Wang
Department of Earth and Planetary Sciences
Stanford University
Stanford, CA
yizhengw@stanford.edu
Markus Zechner
Department of Earth and Planetary Sciences
Stanford University
Stanford, CA
mzechner@stanford.eduJef Caers
Department of Earth and Planetary Sciences
Stanford University
Stanford, CA
jcaers@stanford.edu
Mykel Kochenderfer
Department of Aeronautics and Astronautics
Stanford University
Stanford, CA
mykel@stanford.edu
Abstract
Geological carbon capture and sequestration (CCS), where CO2is stored in subsur-
face formations, is a promising and scalable approach for reducing global emissions.
However, if done incorrectly, it may lead to earthquakes and leakage of CO2back to
the surface, harming both humans and the environment. These risks are exacerbated
by the large amount of uncertainty in the structure of the storage formation. For
these reasons, we propose that CCS operations be modeled as a partially observable
Markov decision process (POMDP) and decisions be informed using automated
planning algorithms. To this end, we develop a simpliﬁed model of CCS operations
based on a 2D spillpoint analysis that retains many of the challenges and safety con-
siderations of the real-world problem. We show how off-the-shelf POMDP solvers
outperform expert baselines for safe CCS planning. This POMDP model can be
used as a test bed to drive the development of novel decision-making algorithms
for CCS operations.
1 Introduction
While global warming continues to pose an existential risk to humanity, the latest IPCC report [1]
suggests that reducing emissions by half before 2030 will secure a livable future. A wide variety
of measures will be necessary to reduce greenhouse gas emissions, but in all signiﬁcant reports,
carbon capture and sequestration (CCS), where carbon is permanently removed from the atmosphere,
accounts for about one-quarter to two-thirds of the cumulative emission reduction [2], [3]. Geological
carbon storage, where CO2is stored into subsurface formations such as saline aquifers, is a promising
technique due to its scalability and the recent increases in the price of CO2[4]–[6], and will be the
focus of this work.
Tackling Climate Change with Machine Learning: workshop at NeurIPS 2022.0:00 0:25 0:50 0:75 1:000:00:20:40:60:81:0
PositionHeightReservoir Top Surface
CO2
Top Surface
Injector
(a) Spillpoint model for CO 2storage.2 4 6 8 100:0000:0020:0040:006Exited V olumeExited CO 2
Ours
Baseline
2 4 6 8 100:00:20:40:6
IterationTrap EfﬁciencyTrapped CO 2
(b) Performance metrics for a no-uncertainty baseline
against POMCPOW (ours).
Figure 1: A simpliﬁed model for CCS operations ammenable to automated decision making.
Even though CCS projects are similar to other, well-studied, subsurface problems such as groundwater
or oil and gas applications, they involve additional and unsolved challenges. First, much less is known
about saline aquifers compared to oil and gas reservoirs, resulting in signiﬁcantly higher subsurface
uncertainty. Second, the interaction of supercritical CO2, brine, and rock results in complex physical
and chemical processes such as trapping mechanisms, mineral precipitations, and geomechanics that
must be accounted for. Lastly, injection of CO2into geological formations comes with signiﬁcant
risks such as induced earthquakes, fractured cap rocks, and reactivation of faults that can lead to
leakage, harming human life and the environment. Therefore, any decision made in the course of a
CCS project needs to balance the trade-off between safety and the utilization of storage capacity to
keep the project economically viable.
CCS operations require a large number of sequential decisions to be made under uncertainty, such
as selecting aquifers from a portfolio, choosing injection rates, deﬁning well locations, selecting
information gathering campaigns, and selecting monitoring strategies. The inherent subsurface
uncertainty combined with complex physio-chemical processes results in a challenging decision
problem for CCS operations that require a tight coupling of information gathering and acting. For
these reasons, we propose to formulate CCS as a partially observable Markov decision process
(POMDP) and rely on POMDP solvers [7] to inform the decision-making process.
Related work : Quantifying subsurface uncertainty is especially important for successfully imple-
menting safe and effective CCS operations and monitoring. Although considerable research has
been devoted to developing better uncertainty quantiﬁcation techniques [8], [9], signiﬁcantly less
attention has been paid to determining how to act on that information. Prior work has focused
on non-sequential optimization approaches [10], [11], or the use of sequential approaches in other
subsurface domains such as oil/gas [12] and groundwater [13].
In this work we introduce a POMDP model of CCS operations based on simpliﬁed physics in order
to spur the development of more advanced solution techniques that can produce safe and reliable
plans. We ﬁrst describe our simpliﬁed model, which is based on spillpoint analysis, but retains
many of the challenges associated with the full-scale CCS problem (ﬁg. 1a). We then compare a
variety of rule-based plans against state-of-the-art POMDP solvers and show how current off the shelf
approaches can improve upon expert plans (ﬁg. 1b). The spillpoint CCS model is implemented in the
open source POMDPs.jl1framework.
2 Approach
POMDP Background A partially observable Markov decision processes (POMDP) [7] is a model
for sequential decision making where an agent takes actions over time to maximize the accumulation
of a reward. A POMDP is deﬁned by the tuple ( S,A,T,R,O,Z,) whereSis the set of states, A
1https://juliapomdp.github.io/POMDPs.jl/latest/
2is the set of actions, Tis a transition model, Ris the reward function, Ois the observation space, Z
is the observation model, and is the discount factor. For complex dynamical systems such as CCS,
the transition function is implemented as a simulator from which transitions can be drawn according
to the distribution s0T(js;a)deﬁned by the action a2Ataken in state s2S. The agent is
uncertain about the current state and therefore maintains a distribution over states called a belief b(s).
The initial belief b0(s)is updated at each timestep using observations o2Osampled with likelihood
Z(ojs;a;s0). A policyis a function that maps beliefs to actions such that a=(b). POMDP
solvers seek to approximate the optimal policy that maximizes the expected discounted sum of
future rewards.
Challenges of Solving a CCS POMDP CCS can be formulated as a POMDP where the states
represent the reservoir structure and the properties of the multi-phase ﬂuid stored therein. The actions
are the placement of sensors, the drilling of CO2injectors, and the setting of the rate of injection. The
observations can come from many modalities including direct observation of the geology through
drilling, as well as indirect methods such as seismic monitoring. The transition function is the deﬁned
by the complex ﬂuid dynamics that govern the injection and evolution of the CO2plume.
Optimal planning for CCS operations is challenging for several reasons: the state, action and
observation spaces are continuous and high dimensional, the transition function is computationally
intensive, requiring hours for a single transition, and since CCS operations are safety-critical, the plan
must have a high degree of reliability. To encourage the development of algorithms that can solve
planning problems of this scale, we developed a simpliﬁed model of CCS operations that retains
many of these challenges, while requiring far less computational effort.
A Spillpoint Model POMDP for CCS Buoyancy is one of the dominant physical forces that
govern the dynamics of CO2injection [14]. Spillpoint models, where only the effects of buoyancy
are used to compute the dynamics of injected CO2, are therefore a simple, but realistic model and
have previously been used to estimate the trapping capacity of a reservoir given the top surface
geometry [14]. In this work, we design a CCS POMDP using a 2D spillpoint model as the transition
function to approximate the CO2dynamics with low computational effort.
In our model, the reservoir is deﬁned by a top surface as shown in ﬁg. 1a, and a porosity which
deﬁnes the fraction of the volume available to store CO2. Given an injection location and volume,
the model determines the amount of CO2trapped in each region of the reservoir. To compute CO2
saturation, the reservoir is automatically segmented into spill regions , where CO2is trapped due
to buoyant forces, and spillpoints , which are connections between spill regions, across which CO2
will migrate. For example in ﬁg. 1a, CO2is injected in the left spill region until the trapped volume
exceeds the spill region volume, and it begins to ﬁll the central spill region. If the spillpoint connects
to a fault, then any CO2that migrates through that spillpoint is considered to have exited the reservoir
orleaked . We model a fault on the left and right boundary of the reservoir domain. For additional
details of the spillpoint algorithm, see appendix A.
To construct a diverse set of reservoirs, we model the top surface geometry by the function
h=hlobesin(5x) +hcenter sin(x) +helevx (1)
wherexis the lateral position. The outer lobe height hlobe, central lobe height hcenter , and elevation
slopehelevdetermine the size and relationship between spill regions. The initial belief is implicitly
deﬁned by distributions over top surface parameters hlobe,hcenter ,helev, and the porosity .
The rest of the POMDP is deﬁned as follows. The state is deﬁned by the top surface height of the
reservoir, the porosity, the injector location, and the amount of trapped and exited CO2. The actions
include the position at which to drill the injector, the rate of CO2injection, the ability to make noisy
observations of the trapped CO2, and the option to end CCS operations. The action to drill involves
specifying a drill location and returns the top surface height at that location. The action to observe
involves specifying sensor locations which return a measurement of the top surface height and CO2
thickness at that location, with noise distributed normally. If no CO2is present, then 0is returned
for both values, providing no additional information on the top surface geometry. Additionally, we
model a sensor on each of the boundaries of the domain that can noiselessly detect if CO2is leaking,
and is included in the observation at each transition, regardless of the action taken.
The reward function includes the competing objectives of storing CO2while avoiding leakage. It
has four components including trapped CO2volume, exited CO2volume, observation costs, and an
3Table 1: Comparison of CCS policies
Method Return Observations Leak Fraction Trap Efﬁciency
Random  104:38320:41 4:606:43 0 :10 0 :080:07
Best Guess MDP  516:03549:10 0:000:00 0 :50 0 :700:27
Fixed Schedule  97:91316:28 42:7024:57 0:10 0:820:17
POMCPOW (Basic)  2811:326009:65 1:201:55 0 :20 0 :580:30
POMCPOW (SIR) 2:244:04 3:003:46 0:00 0:270:32
indicator of CO2leakage. Speciﬁcally, the reward is
R(s;a;s0) =leak 1fVexited>0g+exited Vexited +trapped Vtrapped +observationNobs (2)
where 1fgis the indicator function and Vexited andVexited are, respectively, the changes in exited
and trapped CO2between states sands0, andNobsis the number of observation locations.
3 Experiments
We solve the spillpoint CCS POMDP with four different approaches. The ﬁrst approach ( Random ) is
a random policy where the actions are selected randomly until CCS operations are stopped by chance
or until leakage is detected, at which point operations are halted. The second approach ( Best Guess
MDP ) we do not consider uncertainty in the state, and instead start by selecting a top surface geometry
that matches a single top surface measurement and treating it as the ground truth. Then Monte Carlo
tree search is used to plan an optimal injection strategy. The third approach ( Fixed Schedule ) is
an expert policy with a ﬁxed observation schedule. The action to observer is used every three
timesteps, incorporating each observation into a belief update. Injection continues as long as there is
no possibility of leakage according to the current belief. The last two approaches include solving
the formulation with an off-the-shelf POMDP solver called POMCPOW [15]. The ﬁrst version of
POMCPOW ( POMCPOW (Basic) ) uses a basic particle ﬁlter as the belief update strategy while
the second version ( POMCPOW (SIR) ) uses the more advanced sequential importance resampling
(SIR) belief updating approach (see appendix B for details).
To evaluate the various approaches, we randomly sampled 10realizations of the reservoir geometry
(as the ground truth), and ran each algorithm on this test set, recording the following 4metrics. The
ﬁrst metric is the sum of discounted rewards ( Return ) deﬁned in equation 2, which includes terms
associated with total trapped CO2as well as safety considerations. Additionally, we consider metrics
associated with each sub component of the reward. These include the average number of observations
per trajectory ( Observations ), the fraction of realizations that had leakage ( Leak Fraction ), and the
fraction of trapped CO2compared to the maximum possible trapped volume ( Trap Efﬁciency ). All
hyperparameters are given in appendix C.
The results of these experiments are shown in table 1. The highest return and smallest amount of
leakage is achieved by POMCPOW with SIR. This algorithm behaved conservatively, however, and
rarely used the observe action to gather more information, and therefore only reached an average of
27% trap efﬁciency. Ignoring uncertainty lead to high trap efﬁciency but caused a signiﬁcant chance
of leakage at 50%. The ﬁxed observation schedule had an even higher trap efﬁciency (82%) but still
leaked in 10% of cases. Using a naive belief updating procedure (particle ﬁlter) caused POMCPOW
to become overconﬁdent in its belief and therefore lead two cases with signiﬁcant leakage. We
therefore conclude that automated decision making systems can be helpful for safe CCS operations.
4 Conclusion
To address the upcoming challenges of safe geological carbon storage, we proposed to model CCS as
a POMDP and use automated planning algorithms to design safe operational plans. We developed
a simpliﬁed CCS formulation based on spillpoint analysis that eases the computational burden of
exploring automated decision making for CCS and demonstrated the performance of several existing
algorithms and baselines. We hope this model can be used to drive the development of new algorithms
that support real-world CCS operations.
4Acknowledgments and Disclosure of Funding
We are grateful for support by sponsors of the Stanford Center for Earth Resources Forecasting
(SCERF)
References
[1] H.-O. Pörtner, D. C. Roberts, H. Adams, C. Adler, P. Aldunce, E. Ali, R. A. Begum, R. Betts,
R. B. Kerr, R. Biesbroek, et al. , “Climate change 2022: Impacts, adaptation and vulnerability,”
IPCC Sixth Assessment Report , 2022.
[2] International Energy Agency, World Energy Outlook 2020 . 2020, p. 464.
[3] S. M. Benson and F. M. Orr, “Carbon dioxide capture and storage,” MRS Bulletin , vol. 33,
no. 4, pp. 303–305, 2008.
[4] B. Metz, O. Davidson, H. De Coninck, M. Loos, and L. Meyer, IPCC special report on carbon
dioxide capture and storage . Cambridge: Cambridge University Press, 2005.
[5] T. Wilberforce, A. Baroutaji, B. Soudan, A. H. Al-Alami, and A. G. Olabi, “Outlook of carbon
capture technology and challenges,” Science of the total environment , vol. 657, pp. 56–72,
2019.
[6] I. E. Agency, “CCUS in clean energy transitions,” IEA Paris, 2020.
[7] M. J. Kochenderfer, T. A. Wheeler, and K. H. Wray, Algorithms for Decision Making . MIT
Press, 2022.
[8] C. Scheidt, L. Li, and J. Caers, Quantifying uncertainty in subsurface systems . John Wiley &
Sons, 2018, vol. 236.
[9] D. Lu, S. Painter, N. Azzolina, and M. Burton-Kelly, “Accurate and timely forecasts of
geologic carbon storage using machine learning methods,” in NeurIPS Workshop on Tackling
Climate Change with Machine Learning , 2021.
[10] O. J. Isebor, L. J. Durlofsky, and D. E. Ciaurri, “A derivative-free methodology with lo-
cal and global search for the constrained joint optimization of well locations and controls,”
Computational Geosciences , vol. 18, no. 3, pp. 463–482, 2014.
[11] Y . Yang, J. Wu, X. Sun, J. Wu, and C. Zheng, “A niched pareto tabu search for multi-objective
optimal design of groundwater remediation systems,” Journal of Hydrology , vol. 490, pp. 56–
73, 2013.
[12] G. De Paola, C. Ibanez-Llano, J. Rios, and G. Kollias, “Reinforcement learning for ﬁeld
development policy optimization,” in SPE Annual Technical Conference and Exhibition ,
OnePetro, 2020.
[13] Y . Wang, M. Zechner, J. M. Mern, M. J. Kochenderfer, and J. K. Caers, “A sequential decision-
making framework with uncertainty quantiﬁcation for groundwater management,” Advances
in Water Resources , vol. 166, p. 104 266, 2022.
[14] H. Møll Nilsen, K. -A. Lie, O. Møyner, and O. Andersen, “Spill-point analysis and structural
trapping capacity in saline aquifers using MRST-co2lab,” Computers and Geosciences , vol. 75,
pp. 33–43, 2015.
[15] Z. N. Sunberg and M. J. Kochenderfer, “Online algorithms for POMDPs with continuous
state, action, and observation spaces,” in International Conference on Automated Planning
and Scheduling , 2018.
A Spillpoint Algorithm
Spillpoint analysis [14] allows for the calculation of CO2saturation from the geometry of the reservoir
and total amount of CO2injected. The procedure takes as input the top surface geometry h(x), the
spill regionsr, and the total injected CO2Vinject and returns the CO2saturation at each position, the
trapped volume and the exited volume. Details of the algorithm can be found in algorithm 1. The
CO2saturation is represented a set of polyhedra that indicate the 2D area that is occupied by CO2.
The polyhedra are computed by ﬁrst identifying the spill region responsible for trapping (we followed
the procedure outlined by Møll Nilsen, Lie, Møyner, et al. ), and then determining the depth of the
CO2plume. The depth is found by using an optimizer to minimize the difference between the injected
5volume and the volume of of the polyhedra for a given depth. This optimization procedure is the
most expensive part of the computation.
Algorithm 1 Algorithm for determining CO2depth using spillpoint analysis for mesh mand volume
V
1:function INJECT (h,sr,Vinject )
2:Vtrap= 0
3:SRs =; .Spill regions that are full
4:Sat=; .Polyhedra representing saturated volume
5: whileVtrap<V . While there is remaining CO2volume
6:Vremain =Vinject Vtrap .Compute remaining CO2
7:Vsr SPILL REGION VOLUME (sr) .Max storage of spill region
8: ifVsr>Vremain
9: Sat SatSGETPOLYS (h;sr;Vremain )
10: break
11: else
12: Sat SatSGETPOLYS (h;sr;Vsr)
13: Vtrap Vtrap+Vsr .Count the new trapped CO2
14: SRs SRsSsr .Record full spill region
15: sr UPHILL SPILL REGION (h;sr) .Get the connecting spill region
16: ifsr2FAULTS (h) .If next spill region is a fault
17: Vexit Vremain
18: break
19: ifsr2SRs . Adjacent spill regions are full
20: h MERGE SPILL REGIONS (h;sr) .Merge into larger region
21: Vtrap 0
22: SRs =;
23: Sat=;
24: returnSat;V trap;Vexited
B Belief Updating
After taking action a, the prior belief b(s)is updated to the posterior belief b(s0)with the observation
oaccording to Bayes’ rule [7]
b(s0) =O(oja;s0)Z
sT(s0js;a)b(s)ds (3)
When the transition function, observation model, or belief representation is too complex to do an
analytical belief update, we rely on approximate methods such as particle ﬁlters.
The basic particle ﬁlter algorithm is shown in algorithm 2. The belief is represented by a number of
particles which are samples of the state. Each update of the belief includes simulating the transition
function for each particle to get a sample of the next state, computing the observation likelihood and
then resampling according to the likelihood weights. The challenge with basic particle ﬁltering is
particle depletion where the diversity of particles is reduced due to many of the particle having low
likelihood weights. The problem is exacerbated with the number of belief updates and can require an
intractably large number of initial state samples.
An improvement to basic particle ﬁltering, known as sequential importance resampling (SIR),
iteratively adapts a proposal distribution to be closer to the posterior. The technique is outlined
in algorithm 3. States are sampled from a proposal distribution that is initialized to the current belief.
During each iteration samples are drawn from the proposal and weighted by the observation model
and the importance weight. The proposal distribution is reﬁt to these weighted samples and used
in the next iteration, with the goal of being closer to the posterior distribution and producing better
samples. Finally, a resampling step produces the ﬁnal belief.
Our implementation of SIR makes several design decisions that were crucial to good performance.
First, the proposal distribution is a kernel density estimate over the parameters that deﬁne the top
6Algorithm 2 Basic particle ﬁlter for belief b(withNparticles), after action aand observation o
1:function BASIC PARTICLE FILTER UPDATE (b,N,a,o)
2: Sample transitions s0
iT(jsi;a)whereb=fsigN
i=1
3: Compute likelihood weights wi O(oja;s0
i)
4:b0 ResampleNparticles fromfs0
igN
i=1with weightsfwigN
i=1
5: returnb0
surface geometry. Second, we incorporate all prior observations (not just the most recent) into the
particle weight to ensure a good match with the observed data. Third, if there is insufﬁcient particle
diversity when ﬁtting the next proposal, we ﬁt to the elite samples deﬁned by the top 30th percentile
of samples in terms of their weights. Fourth, at each iteration we include 50% samples from the prior
distribution to mitigate the effect of poor proposals. Lastly, we run SIR until there are at least N=2
unique particles when resampling or we reach the pre-speciﬁed computational budget for the belief
update.
Algorithm 3 Sequential Importance Resampling (SIR) particle ﬁlter for belief b(withNparticles),
after actionaand observation o, takingNksamples per iteration.
1:function SIRP ARTICLE FILTER UPDATE (b,N,a,o)
2:q1(s) b(s)
3:S ;
4:W ;
5: fork21:::K
6: SampleNkstates from proposal siqk
7: Compute importance weight wi b(s)=qk(s)
8: Sample transitions s0
iT(jsi;a)
9: Include likelihood weight wi wiO(oja;s0
i)
10: Store particlesS SSsi
11: Store weightsW WSwi
12:qk ﬁtfs0
igNk
i=1with weightsfwigNk
i=1
13:b0 ResampleNparticles fromSwith weightsW
14: returnb0
Comparison between the basic particle ﬁltering approach and SIR is shown in ﬁg. 2. For the same
number of particles representing the belief, SIR leads to a better estimate of the posterior distribution
while the basic particle ﬁlter suffers from particle depletion.
C Experiment Hyperparameters
The parameters for the POMDP formulation and the hyperparameters for the experimental setup are
included in table 2.
70.00 0.25 0.50 0.75 1.000.00.20.40.60.81.0Basic (0 Observations)
Particles
Ground truth
0.00 0.25 0.50 0.75 1.000.00.20.40.60.81.0SIR (0 observations)
0.00 0.25 0.50 0.75 1.000.00.20.40.60.81.0Basic (1 Observation)
0.00 0.25 0.50 0.75 1.000.00.20.40.60.81.0SIR (1 Observation)
0.00 0.25 0.50 0.75 1.000.00.20.40.60.81.0Basic (3 Observations)
0.00 0.25 0.50 0.75 1.000.00.20.40.60.81.0SIR (3 Observations)Figure 2: Comparison between basic particle ﬁltering (left column) and SIR (right column) after
different numbers of observations.
Table 2: POMDP and Solver Hyperparameters
Variable Description Value
Discount Factor ( ) 0:9
leaked  1000:0
exited  1000:0
trapped 100:0
obs  0:1
CO2height std. dev. ( height ) 0:01
CO2thickness std. dev. ( sat) 0:01
Observation conﬁgurations f0:25:0:25:0:75;0:125:0:125:0:875g
Injection rates f0:01;0:07g
Drill Locations f0:1:0:1:0:9g
Distribution of hlobe U(0:05;0:25)
Distribution of hcenter U(0:05;0:5)
Distribution of helev U(0:05;0:5)
Distribution of normalized porosity ( )U(0:5;1:5)
Exploration Coefﬁcient for UCB 20:0
Observation widening exponent ( obs) 0:3
Observation widening coefﬁcient ( kobs) 10:0
Action widening exponent ( act) 0:5
Action widening coefﬁcient ( kact) 10:0
Number of tree queries ( Nquery ) 5000
Estimation value for leaf nodes 0:1optimal return
Particles for Basic Particle ﬁlter 2000
Particles for SIR ( N) 200
Samples per iteration for SIR 100
Max CPU time for belief update 60seconds
8